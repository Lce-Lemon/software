private static String getHttpReq(SubscriptionDetailModel detailModel,
                                 SubscriptionDetailConstant.NoticeEventEnum noticeEventEnum,
                                 SubscriptionDetailConfigModel configModel,
                                 List<Map<String, Object>> transformDataList,
                                 SubscriptionDetailConfigModel.UrlModel urlInfo) {

    SubscriptionDetailConfigModel.BodyModel bodyModel = configModel.getBody();
    SubscriptionDetailConfigModel.RequestConfig requestConfig = bodyModel.getRequestConfig();
    List<SubscriptionDetailConfigModel.BaseMapping> paramMapping = requestConfig.getParamMapping();
    List<SubscriptionDetailConfigModel.DataMapping> dataMapping = requestConfig.getDataMapping();
    Boolean customMappingEnable = detailModel.getCustomMappingEnable();
    Boolean isBatch = urlInfo.getIsBatch();

    // 获取删除映射键
    String delMappingKey = customMappingEnable ?
        paramMapping.stream()
            .filter(item -> DELETE_KEY.equals(item.getKey()))
            .map(SubscriptionDetailConfigModel.BaseMapping::getMapping)
            .findFirst()
            .orElse(DELETE_KEY) : DELETE_KEY;

    // 判断是否是POST/PUT/PATCH接口
    if (HTTP_METHOD_IS_POST_PUT_PATCH.test(urlInfo.getMethod())) {
        return buildPostRequestBody(noticeEventEnum, requestConfig, paramMapping, dataMapping,
                                  customMappingEnable, isBatch, delMappingKey, transformDataList, configModel);
    } else {
        // GET请求参数处理
        String primaryKey = dataMapping.stream()
            .filter(SubscriptionDetailConfigModel.DataMapping::getIsPrimary)
            .findFirst()
            .orElseThrow(() -> new CustomException("未找到唯一键"))
            .getMapping();

        return transformDataList.stream()
            .map(item -> delMappingKey + "=" + item.get(primaryKey))
            .collect(Collectors.joining("&"));
    }
}

private static String buildPostRequestBody(SubscriptionDetailConstant.NoticeEventEnum noticeEventEnum,
                                         SubscriptionDetailConfigModel.RequestConfig requestConfig,
                                         List<SubscriptionDetailConfigModel.BaseMapping> paramMapping,
                                         List<SubscriptionDetailConfigModel.DataMapping> dataMapping,
                                         Boolean customMappingEnable,
                                         Boolean isBatch,
                                         String delMappingKey,
                                         List<Map<String, Object>> transformDataList,
                                         SubscriptionDetailConfigModel configModel) {

    String dataPosition = requestConfig.getDataPosition();
    boolean hasDataPosition = StringUtils.isNotBlank(dataPosition);
    boolean isUrlsLength3 = configModel.getUrls().size() == MAX_URL_LENGTH;

    // 获取实际数据
    Object actualData = getActualData(noticeEventEnum, dataMapping, transformDataList, isBatch, delMappingKey);

    // 根据四种情况构建请求体
    if (hasDataPosition && isUrlsLength3) {
        // 情况1: dataPosition有值且urls长度为3
        return buildNestedStructureWithData(dataPosition, actualData);
    } else if (hasDataPosition && !isUrlsLength3) {
        // 情况2: dataPosition有值且urls长度不为3
        return buildNestedStructureWithOptionAndData(dataPosition, actualData, noticeEventEnum,
                                                   paramMapping, customMappingEnable);
    } else if (!hasDataPosition && isUrlsLength3) {
        // 情况3: dataPosition无值且urls长度为3
        return JSON.toJSONString(actualData, SystemGlobalConfig.FASTJSON_DEFAULT_WRITER_FEATURES);
    } else {
        // 情况4: dataPosition无值且urls长度不为3
        return buildFlatStructureWithOptionAndData(actualData, noticeEventEnum,
                                                 paramMapping, customMappingEnable);
    }
}

/**
 * 获取实际数据（处理删除和普通数据）
 */
private static Object getActualData(SubscriptionDetailConstant.NoticeEventEnum noticeEventEnum,
                                  List<SubscriptionDetailConfigModel.DataMapping> dataMapping,
                                  List<Map<String, Object>> transformDataList,
                                  Boolean isBatch,
                                  String delMappingKey) {

    if (noticeEventEnum.equals(SubscriptionDetailConstant.NoticeEventEnum.DELETE)) {
        // 删除操作：获取主键数据
        String primaryKey = dataMapping.stream()
            .filter(SubscriptionDetailConfigModel.DataMapping::getIsPrimary)
            .findFirst()
            .orElseThrow(() -> new CustomException("未找到唯一键"))
            .getMapping();

        List<Object> primaryList = transformDataList.stream()
            .map(item -> item.get(primaryKey))
            .collect(Collectors.toList());

        return isBatch ? primaryList : primaryList.get(0);
    } else {
        // 普通操作：返回完整数据
        return isBatch ? transformDataList : transformDataList.get(0);
    }
}

/**
 * 构建嵌套结构（只包含数据）
 * 情况1: dataPosition有值且urls长度为3
 * 例：{"a":{"b": [{...}]}} 或 {"a":{"b": {...}}}
 */
private static String buildNestedStructureWithData(String dataPosition, Object actualData) {
    JSONObject result = new JSONObject();
    JSONObject current = result;

    String[] keys = dataPosition.split("\\.");
    for (int i = 0; i < keys.length - 1; i++) {
        JSONObject nested = new JSONObject();
        current.put(keys[i], nested);
        current = nested;
    }

    // 最后一层直接放数据
    current.put(keys[keys.length - 1], actualData);

    return JSON.toJSONString(result, SystemGlobalConfig.FASTJSON_DEFAULT_WRITER_FEATURES);
}

/**
 * 构建嵌套结构（包含option和数据字段）
 * 情况2: dataPosition有值且urls长度不为3
 * 例：{"a":{"b": {"option": "create", "userList": [{...}]}}}
 */
private static String buildNestedStructureWithOptionAndData(String dataPosition,
                                                          Object actualData,
                                                          SubscriptionDetailConstant.NoticeEventEnum noticeEventEnum,
                                                          List<SubscriptionDetailConfigModel.BaseMapping> paramMapping,
                                                          Boolean customMappingEnable) {
    JSONObject result = new JSONObject();
    JSONObject current = result;

    String[] keys = dataPosition.split("\\.");
    for (int i = 0; i < keys.length - 1; i++) {
        JSONObject nested = new JSONObject();
        current.put(keys[i], nested);
        current = nested;
    }

    // 最后一层创建包含option和数据的对象
    JSONObject finalLayer = new JSONObject();

    // 添加option字段
    addOptionField(finalLayer, noticeEventEnum, paramMapping, customMappingEnable);

    // 添加数据字段
    addDataField(finalLayer, actualData, paramMapping, customMappingEnable);

    current.put(keys[keys.length - 1], finalLayer);

    return JSON.toJSONString(result, SystemGlobalConfig.FASTJSON_DEFAULT_WRITER_FEATURES);
}

/**
 * 构建扁平结构（包含option和数据字段）
 * 情况4: dataPosition无值且urls长度不为3
 * 例：{"option": "create", "userList": [{...}]}
 */
private static String buildFlatStructureWithOptionAndData(Object actualData,
                                                        SubscriptionDetailConstant.NoticeEventEnum noticeEventEnum,
                                                        List<SubscriptionDetailConfigModel.BaseMapping> paramMapping,
                                                        Boolean customMappingEnable) {
    JSONObject result = new JSONObject();

    // 添加option字段
    addOptionField(result, noticeEventEnum, paramMapping, customMappingEnable);

    // 添加数据字段
    addDataField(result, actualData, paramMapping, customMappingEnable);

    return JSON.toJSONString(result, SystemGlobalConfig.FASTJSON_DEFAULT_WRITER_FEATURES);
}

/**
 * 添加option字段
 */
private static void addOptionField(JSONObject target,
                                 SubscriptionDetailConstant.NoticeEventEnum noticeEventEnum,
                                 List<SubscriptionDetailConfigModel.BaseMapping> paramMapping,
                                 Boolean customMappingEnable) {

    paramMapping.stream()
        .filter(mapping -> OPTION.equals(mapping.getKey()))
        .findFirst()
        .ifPresent(mapping -> {
            String optionKey = customMappingEnable ? mapping.getMapping() : mapping.getKey();
            target.put(optionKey, noticeEventEnum.key());
        });
}

/**
 * 添加数据字段
 */
private static void addDataField(JSONObject target,
                               Object actualData,
                               List<SubscriptionDetailConfigModel.BaseMapping> paramMapping,
                               Boolean customMappingEnable) {

    paramMapping.stream()
        .filter(mapping -> DATA_KEYS.contains(mapping.getKey()))
        .findFirst()
        .ifPresent(mapping -> {
            if (StringUtils.isNotBlank(mapping.getMapping())) {
                // mapping不为空，使用mapping作为key
                String dataKey = customMappingEnable ? mapping.getMapping() : mapping.getKey();
                target.put(dataKey, actualData);
            } else {
                // mapping为空，这种情况在嵌套结构中已经处理，这里不应该到达
                // 如果到达这里，说明逻辑有问题
                throw new IllegalStateException("Data mapping is empty in non-direct data scenario");
            }
        });
}