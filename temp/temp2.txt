// 1. WebSocket配置类 (适用于Undertow)
@Configuration
@EnableWebSocket
public class WebSocketConfig implements WebSocketConfigurer {

    @Autowired
    private MyWebSocketHandler webSocketHandler;

    @Override
    public void registerWebSocketHandlers(WebSocketHandlerRegistry registry) {
        registry.addHandler(webSocketHandler, "/websocket")
                .setAllowedOrigins("*") // 生产环境建议设置具体的域名
                .withSockJS(); // 可选：启用SockJS支持
    }
}

// 2. WebSocket处理器 (Undertow兼容版本)
@Component
@Slf4j
public class MyWebSocketHandler extends TextWebSocketHandler {

    private final Map<String, WebSocketSession> sessions = new ConcurrentHashMap<>();
    private final Map<String, Long> lastPongTime = new ConcurrentHashMap<>();
    private final ScheduledExecutorService scheduler = Executors.newScheduledThreadPool(2);

    // 心跳检查间隔（秒）
    private static final int HEARTBEAT_INTERVAL = 30;
    // 连接超时时间（秒）
    private static final int CONNECTION_TIMEOUT = 60;

    @PostConstruct
    public void init() {
        // 启动心跳检查定时任务
        scheduler.scheduleAtFixedRate(this::checkHeartbeat,
                HEARTBEAT_INTERVAL, HEARTBEAT_INTERVAL, TimeUnit.SECONDS);
    }

    @Override
    public void afterConnectionEstablished(WebSocketSession session) throws Exception {
        String sessionId = session.getId();
        sessions.put(sessionId, session);
        lastPongTime.put(sessionId, System.currentTimeMillis());

        log.info("WebSocket连接建立，sessionId: {}", sessionId);

        // 发送欢迎消息
        sendMessage(session, "连接成功");
    }

    @Override
    public void handleTextMessage(WebSocketSession session, TextMessage message) throws Exception {
        String sessionId = session.getId();
        String payload = message.getPayload();

        log.info("收到消息，sessionId: {}, message: {}", sessionId, payload);

        // 处理不同类型的消息
        if ("ping".equals(payload)) {
            // 收到ping，回复pong
            sendMessage(session, "pong");
            lastPongTime.put(sessionId, System.currentTimeMillis());
        } else if ("pong".equals(payload)) {
            // 收到pong，更新最后活跃时间
            lastPongTime.put(sessionId, System.currentTimeMillis());
        } else {
            // 处理业务消息
            handleBusinessMessage(session, payload);
        }
    }

    @Override
    public void handlePongMessage(WebSocketSession session, PongMessage message) throws Exception {
        String sessionId = session.getId();
        lastPongTime.put(sessionId, System.currentTimeMillis());
        log.debug("收到pong消息，sessionId: {}", sessionId);
    }

    @Override
    public void afterConnectionClosed(WebSocketSession session, CloseStatus status) throws Exception {
        String sessionId = session.getId();
        sessions.remove(sessionId);
        lastPongTime.remove(sessionId);

        log.info("WebSocket连接关闭，sessionId: {}, status: {}", sessionId, status);
    }

    @Override
    public void handleTransportError(WebSocketSession session, Throwable exception) throws Exception {
        String sessionId = session.getId();
        log.error("WebSocket传输错误，sessionId: {}", sessionId, exception);

        // 清理会话
        sessions.remove(sessionId);
        lastPongTime.remove(sessionId);
    }

    /**
     * 发送消息（线程安全）
     */
    private void sendMessage(WebSocketSession session, String message) {
        try {
            synchronized (session) {
                if (session.isOpen()) {
                    session.sendMessage(new TextMessage(message));
                }
            }
        } catch (Exception e) {
            log.error("发送消息失败，sessionId: {}", session.getId(), e);
        }
    }

    /**
     * 发送ping消息（Undertow兼容）
     */
    private void sendPing(WebSocketSession session) {
        try {
            synchronized (session) {
                if (session.isOpen()) {
                    // 对于Undertow，使用文本消息发送ping
                    session.sendMessage(new TextMessage("ping"));
                }
            }
        } catch (Exception e) {
            log.error("发送ping消息失败，sessionId: {}", session.getId(), e);
        }
    }

    /**
     * 广播消息到所有连接
     */
    public void broadcast(String message) {
        sessions.values().parallelStream().forEach(session -> {
            sendMessage(session, message);
        });
    }

    /**
     * 发送消息到指定会话
     */
    public void sendToSession(String sessionId, String message) {
        WebSocketSession session = sessions.get(sessionId);
        if (session != null) {
            sendMessage(session, message);
        }
    }

    /**
     * 获取当前连接数
     */
    public int getConnectionCount() {
        return sessions.size();
    }

    /**
     * 获取所有会话ID
     */
    public Set<String> getSessionIds() {
        return new HashSet<>(sessions.keySet());
    }

    /**
     * 处理业务消息
     */
    private void handleBusinessMessage(WebSocketSession session, String message) {
        // 这里处理你的业务逻辑
        // 例如：解析JSON消息，调用业务服务等

        try {
            // 示例：回显消息
            String response = "收到消息: " + message + " (时间: " +
                    LocalDateTime.now().format(DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss")) + ")";
            sendMessage(session, response);
        } catch (Exception e) {
            log.error("处理业务消息失败", e);
        }
    }

    /**
     * 心跳检查
     */
    private void checkHeartbeat() {
        long currentTime = System.currentTimeMillis();

        // 使用迭代器安全地移除过期会话
        Iterator<Map.Entry<String, WebSocketSession>> iterator = sessions.entrySet().iterator();

        while (iterator.hasNext()) {
            Map.Entry<String, WebSocketSession> entry = iterator.next();
            String sessionId = entry.getKey();
            WebSocketSession session = entry.getValue();
            Long lastPong = lastPongTime.get(sessionId);

            if (lastPong == null ||
                (currentTime - lastPong) > CONNECTION_TIMEOUT * 1000) {

                log.warn("会话超时，关闭连接，sessionId: {}", sessionId);
                try {
                    session.close(CloseStatus.GOING_AWAY);
                } catch (Exception e) {
                    log.error("关闭超时连接失败", e);
                }
                iterator.remove();
                lastPongTime.remove(sessionId);
            } else {
                // 发送ping消息
                if (session.isOpen()) {
                    sendPing(session);
                }
            }
        }

        log.debug("心跳检查完成，当前连接数: {}", sessions.size());
    }

    @PreDestroy
    public void cleanup() {
        log.info("正在关闭WebSocket处理器...");
        scheduler.shutdown();
        try {
            if (!scheduler.awaitTermination(5, TimeUnit.SECONDS)) {
                scheduler.shutdownNow();
            }
        } catch (InterruptedException e) {
            scheduler.shutdownNow();
        }

        // 关闭所有连接
        sessions.values().forEach(session -> {
            try {
                session.close(CloseStatus.GOING_AWAY);
            } catch (Exception e) {
                log.error("关闭会话失败", e);
            }
        });
    }
}

// 3. 控制器（用于测试和管理）
@RestController
@RequestMapping("/api/websocket")
public class WebSocketController {

    @Autowired
    private MyWebSocketHandler webSocketHandler;

    @PostMapping("/broadcast")
    public ResponseEntity<Map<String, Object>> broadcast(@RequestBody Map<String, String> request) {
        String message = request.get("message");
        webSocketHandler.broadcast(message);

        Map<String, Object> response = new HashMap<>();
        response.put("success", true);
        response.put("message", "消息已广播");
        response.put("connectionCount", webSocketHandler.getConnectionCount());

        return ResponseEntity.ok(response);
    }

    @PostMapping("/send/{sessionId}")
    public ResponseEntity<Map<String, Object>> sendToSession(@PathVariable String sessionId,
                                                           @RequestBody Map<String, String> request) {
        String message = request.get("message");
        webSocketHandler.sendToSession(sessionId, message);

        Map<String, Object> response = new HashMap<>();
        response.put("success", true);
        response.put("message", "消息已发送");
        response.put("sessionId", sessionId);

        return ResponseEntity.ok(response);
    }

    @GetMapping("/status")
    public ResponseEntity<Map<String, Object>> getStatus() {
        Map<String, Object> status = new HashMap<>();
        status.put("connectionCount", webSocketHandler.getConnectionCount());
        status.put("sessionIds", webSocketHandler.getSessionIds());

        return ResponseEntity.ok(status);
    }
}

// 4. Undertow配置 (application.yml)
/*
server:
  undertow:
    threads:
      worker: 200
      io: 8
    buffer-size: 1024
    direct-buffers: true
    websockets:
      per-frame-deflate: true
      per-message-deflate: true
      compression-level: 6
*/

// 5. 依赖配置 (pom.xml)
/*
<dependencies>
    <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-web</artifactId>
        <exclusions>
            <exclusion>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-starter-tomcat</artifactId>
            </exclusion>
        </exclusions>
    </dependency>
    <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-undertow</artifactId>
    </dependency>
    <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-websocket</artifactId>
    </dependency>
</dependencies>
*/

// 6. 客户端测试代码 (JavaScript)
/*
class WebSocketClient {
    constructor(url) {
        this.url = url;
        this.socket = null;
        this.reconnectInterval = 5000;
        this.maxReconnectAttempts = 5;
        this.reconnectAttempts = 0;
    }

    connect() {
        this.socket = new WebSocket(this.url);

        this.socket.onopen = (event) => {
            console.log('WebSocket连接已建立');
            this.reconnectAttempts = 0;
        };

        this.socket.onmessage = (event) => {
            console.log('收到消息:', event.data);

            // 如果收到ping，回复pong
            if (event.data === 'ping') {
                this.send('pong');
            }
        };

        this.socket.onclose = (event) => {
            console.log('WebSocket连接已关闭');
            this.reconnect();
        };

        this.socket.onerror = (error) => {
            console.error('WebSocket错误:', error);
        };
    }

    send(message) {
        if (this.socket && this.socket.readyState === WebSocket.OPEN) {
            this.socket.send(message);
        } else {
            console.warn('WebSocket未连接');
        }
    }

    reconnect() {
        if (this.reconnectAttempts < this.maxReconnectAttempts) {
            this.reconnectAttempts++;
            console.log(`尝试重连 (${this.reconnectAttempts}/${this.maxReconnectAttempts})`);
            setTimeout(() => this.connect(), this.reconnectInterval);
        } else {
            console.error('重连失败，已达到最大重连次数');
        }
    }

    close() {
        if (this.socket) {
            this.socket.close();
        }
    }
}

// 使用示例
const client = new WebSocketClient('ws://localhost:8080/websocket');
client.connect();

// 发送消息
setTimeout(() => {
    client.send('Hello, WebSocket!');
}, 1000);
*/