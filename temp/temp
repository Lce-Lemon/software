/**
     * 获取http请求参数
     *
     * @param detailModel       订阅详情对象
     * @param noticeEventEnum   通知事件
     * @param configModel       配置信息
     * @param transformDataList 数据列表
     * @param urlInfo           url地址
     * @return {@link String}
     * @author Leiquan.Guo
     * @date 2025/5/21 16:41
     * @description 获取http请求参数
     */
    private static String getHttpReq(SubscriptionDetailModel detailModel,
                                     SubscriptionDetailConstant.NoticeEventEnum noticeEventEnum,
                                     SubscriptionDetailConfigModel configModel,
                                     List<Map<String, Object>> transformDataList,
                                     SubscriptionDetailConfigModel.UrlModel urlInfo) {

        SubscriptionDetailConfigModel.BodyModel bodyModel = configModel.getBody();
        SubscriptionDetailConfigModel.RequestConfig requestConfig = bodyModel.getRequestConfig();
        List<SubscriptionDetailConfigModel.BaseMapping> paramMapping = requestConfig.getParamMapping();
        List<SubscriptionDetailConfigModel.DataMapping> dataMapping = requestConfig.getDataMapping();
        Boolean customMappingEnable = detailModel.getCustomMappingEnable();

        // 是否批量接口
        Boolean isBatch = urlInfo.getIsBatch();

        // 获取删除映射键
        String delMappingKey = customMappingEnable ?
                paramMapping.stream()
                        .filter(item -> DELETE_KEY.equals(item.getKey()))
                        .map(SubscriptionDetailConfigModel.BaseMapping::getMapping)
                        .findFirst()
                        .orElse(DELETE_KEY) : DELETE_KEY;

        // 判断是否是POST/PUT/PATCH接口
        if (HTTP_METHOD_IS_POST_PUT_PATCH.test(urlInfo.getMethod())) {
            return buildPostRequestBody(noticeEventEnum, requestConfig, paramMapping, dataMapping,
                    customMappingEnable, isBatch, delMappingKey, transformDataList, configModel);
        } else {
            // GET请求参数处理
            String primaryKey = dataMapping.stream()
                    .filter(SubscriptionDetailConfigModel.DataMapping::getIsPrimary)
                    .findFirst()
                    .orElseThrow(() -> new CustomException("未找到唯一键"))
                    .getMapping();

            return transformDataList.stream()
                    .map(item -> delMappingKey + "=" + item.get(primaryKey))
                    .collect(Collectors.joining("&"));
        }
    }

    /**
     * 构建请求参数
     *
     * @param noticeEventEnum     事件类型
     * @param requestConfig       请求配置
     * @param paramMapping        参数配置
     * @param dataMapping         数据配置
     * @param customMappingEnable 开启自定义映射
     * @param isBatch             是否批量
     * @param delMappingKey       删除key
     * @param transformDataList   数据列表
     * @param configModel         配置对象
     * @return {@link String}
     * @author Leiquan.Guo
     * @date 2025/7/14 14:43
     * @description 构建请求参数
     */
    private static String buildPostRequestBody(SubscriptionDetailConstant.NoticeEventEnum noticeEventEnum,
                                               SubscriptionDetailConfigModel.RequestConfig requestConfig,
                                               List<SubscriptionDetailConfigModel.BaseMapping> paramMapping,
                                               List<SubscriptionDetailConfigModel.DataMapping> dataMapping,
                                               Boolean customMappingEnable,
                                               Boolean isBatch,
                                               String delMappingKey,
                                               List<Map<String, Object>> transformDataList,
                                               SubscriptionDetailConfigModel configModel) {

        String dataPosition = requestConfig.getDataPosition();
        boolean hasDataPosition = StringUtils.isNotBlank(dataPosition);
        boolean hasOption = configModel.getUrls().size() != MAX_URL_LENGTH;

        // 获取实际数据
        Object actualData = getActualData(noticeEventEnum, dataMapping, transformDataList, isBatch);

        // 获取数据参数映射
        SubscriptionDetailConfigModel.BaseMapping dataParamMapping = paramMapping.stream().filter(item -> DATA_KEYS.contains(item.getKey()))
                .findFirst().orElseThrow(() -> new CustomException("数据映射参数获取失败"));

        // 操作参数映射
        SubscriptionDetailConfigModel.BaseMapping optionParamMapping = paramMapping.stream().filter(item -> OPTION.contains(item.getKey()))
                .findFirst().orElseThrow(() -> new CustomException("操作参数获取失败"));

        // option key
        String optionKey = customMappingEnable ? optionParamMapping.getMapping() : optionParamMapping.getKey();
        // mapping不为空，使用mapping作为key
        String dataKey = customMappingEnable ? dataParamMapping.getMapping() : dataParamMapping.getKey();

        if (hasDataPosition) {
            JSONObject result = new JSONObject();
            JSONObject current = result;

            // dataPosition为a.b
            String[] keys = dataPosition.split("\\.");
            // 排除最后一层例如（a.b的b）
            for (int i = 0; i < keys.length - 1; i++) {
                JSONObject nested = new JSONObject();
                current.put(keys[i], nested);
                current = nested;
            }

            // 数据是否需要少一层，例如｛"b": {"dataList": [{...}]}｝返回为｛"b": [{...}]｝
            String finalLayerKey = keys[keys.length - 1];
            if (hasOption) {
                // 必须增加option，故不可少一层
                // 最后一层创建包含option和数据的对象
                JSONObject finalLayer = new JSONObject();
                finalLayer.put(optionKey, noticeEventEnum.key());

                // 删除
                if (SubscriptionDetailConstant.NoticeEventEnum.DELETE.equals(noticeEventEnum)) {
                    finalLayer.put(StringUtils.isBlank(delMappingKey) ? DELETE_KEY : delMappingKey, actualData);
                } else {
                    finalLayer.put(StringUtils.isBlank(dataKey) ? dataParamMapping.getKey() : dataKey, actualData);
                }

                current.put(finalLayerKey, finalLayer);
            } else {
                if (StringUtils.isBlank(dataKey)) {
                    current.put(finalLayerKey, actualData);
                } else {
                    current.put(finalLayerKey, JSONObject.of(dataKey, actualData));
                }
            }

            return JSON.toJSONString(result, SystemGlobalConfig.FASTJSON_DEFAULT_WRITER_FEATURES);
        } else {
            if (hasOption) {
                // 必须增加option，故不可少一层
                // 最后一层创建包含option和数据的对象
                JSONObject finalLayer = new JSONObject();
                finalLayer.put(optionKey, noticeEventEnum.key());

                // 删除
                if (SubscriptionDetailConstant.NoticeEventEnum.DELETE.equals(noticeEventEnum)) {
                    finalLayer.put(StringUtils.isBlank(delMappingKey) ? DELETE_KEY : delMappingKey, actualData);
                } else {
                    finalLayer.put(StringUtils.isBlank(dataKey) ? dataParamMapping.getKey() : dataKey, actualData);
                }

                return JSON.toJSONString(finalLayer, SystemGlobalConfig.FASTJSON_DEFAULT_WRITER_FEATURES);
            } else {
                if (StringUtils.isBlank(dataKey)) {
                    return JSON.toJSONString(actualData, SystemGlobalConfig.FASTJSON_DEFAULT_WRITER_FEATURES);
                } else {
                    return JSONObject.of(dataKey, actualData).toString(SystemGlobalConfig.FASTJSON_DEFAULT_WRITER_FEATURES);
                }
            }
        }
    }

    /**
     * 获取实际数据
     *
     * @param noticeEventEnum   事件类型
     * @param dataMapping       数据映射
     * @param transformDataList 数据列表
     * @param isBatch           是否批量接口
     * @return {@link Object}
     * @author Leiquan.Guo
     * @date 2025/7/14 14:44
     * @description 获取实际数据
     */
    private static Object getActualData(SubscriptionDetailConstant.NoticeEventEnum noticeEventEnum,
                                        List<SubscriptionDetailConfigModel.DataMapping> dataMapping,
                                        List<Map<String, Object>> transformDataList,
                                        Boolean isBatch) {

        if (noticeEventEnum.equals(SubscriptionDetailConstant.NoticeEventEnum.DELETE)) {
            // 删除操作：获取主键数据
            String primaryKey = dataMapping.stream()
                    .filter(SubscriptionDetailConfigModel.DataMapping::getIsPrimary)
                    .findFirst()
                    .orElseThrow(() -> new CustomException("未找到唯一键"))
                    .getMapping();

            List<Object> primaryList = transformDataList.stream()
                    .map(item -> item.get(primaryKey))
                    .collect(Collectors.toList());

            return isBatch ? primaryList : primaryList.get(0);
        } else {
            // 普通操作：返回完整数据
            return isBatch ? transformDataList : transformDataList.get(0);
        }
    }