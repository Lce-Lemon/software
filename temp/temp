private static String getHttpReq(SubscriptionDetailModel detailModel, SubscriptionDetailConstant.NoticeEventEnum noticeEventEnum, SubscriptionDetailConfigModel configModel, List<Map<String, Object>> transformDataList, SubscriptionDetailConfigModel.UrlModel urlInfo) {
        SubscriptionDetailConfigModel.BodyModel bodyModel = configModel.getBody();
        SubscriptionDetailConfigModel.RequestConfig requestConfig = bodyModel.getRequestConfig();
        List<SubscriptionDetailConfigModel.BaseMapping> paramMapping = requestConfig.getParamMapping();
        List<SubscriptionDetailConfigModel.DataMapping> dataMapping = requestConfig.getDataMapping();
        Boolean customMappingEnable = detailModel.getCustomMappingEnable();

        // 是否批量接口
        Boolean isBatch = urlInfo.getIsBatch();

        // 删除标识key
        String delMappingKey = customMappingEnable ? paramMapping.stream().filter(item -> DELETE_KEY.equals(item.getKey())).map(SubscriptionDetailConfigModel.BaseMapping::getMapping).findFirst().orElse(DELETE_KEY) : DELETE_KEY;

        // 判断是否是put或post接口
        if (HTTP_METHOD_IS_POST_PUT_PATCH.test(urlInfo.getMethod())) {
            // 数据位置
            String dataPosition = requestConfig.getDataPosition();

            JSONObject requestBodyObj = new JSONObject();
            Object current = requestBodyObj;
            if (customMappingEnable && StringUtils.isNotBlank(dataPosition)) {
                String[] keys = dataPosition.split("\\.");
                for (int i = 0; i < keys.length; i++) {
                    String key = keys[i];
                    int finalI = i;
                    current = ((JSONObject) current).computeIfAbsent(key, k -> {
                        if (!noticeEventEnum.equals(SubscriptionDetailConstant.NoticeEventEnum.SCHEDULED_TASK)
                                && finalI == keys.length - 1
                                && configModel.getUrls().size() == MAX_URL_LENGTH) {

                            // 删除单独处理
                            if (noticeEventEnum.equals(SubscriptionDetailConstant.NoticeEventEnum.DELETE)) {
                                // 唯一键
                                String primaryKey = dataMapping.stream().filter(SubscriptionDetailConfigModel.DataMapping::getIsPrimary).findFirst().orElseThrow(() -> new CustomException("未找到唯一键")).getMapping();
                                List<Object> primaryList = transformDataList.stream().map(item -> item.get(primaryKey)).collect(Collectors.toList());

                                if (StringUtils.isBlank(delMappingKey)) {
                                    return isBatch ? primaryList : primaryList.get(0);
                                }
                                return isBatch ? JSONObject.of(delMappingKey, primaryList) : JSONObject.of(delMappingKey, primaryList.get(0));
                            }

                            return isBatch ? transformDataList : transformDataList.get(0);
                        }
                        return new JSONObject();
                    });
                }
            }

            // 请求体数据列表映射
            if (current instanceof JSONObject && ((JSONObject) current).isEmpty()) {
                for (SubscriptionDetailConfigModel.BaseMapping mapping : paramMapping) {
                    if (DATA_KEYS.contains(mapping.getKey())) {
                        if (noticeEventEnum.equals(SubscriptionDetailConstant.NoticeEventEnum.DELETE)) {
                            // 唯一键
                            String primaryKey = dataMapping.stream().filter(SubscriptionDetailConfigModel.DataMapping::getIsPrimary).findFirst().orElseThrow(() -> new CustomException("未找到唯一键")).getMapping();
                            List<Object> primaryList = transformDataList.stream().map(item -> item.get(primaryKey)).collect(Collectors.toList());

                            if (StringUtils.isBlank(delMappingKey)) {
                                current = isBatch ? primaryList : primaryList.get(0);
                                continue;
                            }
                            ((JSONObject) current).put(delMappingKey, isBatch ? primaryList : primaryList.get(0));
                        } else {
                            if (StringUtils.isBlank(mapping.getMapping())) {
                                current = isBatch ? transformDataList : transformDataList.get(0);
                                continue;
                            }
                            ((JSONObject) current).put(customMappingEnable ? mapping.getMapping() : mapping.getKey(), isBatch ? transformDataList : transformDataList.get(0));
                        }
                    }
                    if (configModel.getUrls().size() != MAX_URL_LENGTH
                            && !noticeEventEnum.equals(SubscriptionDetailConstant.NoticeEventEnum.SCHEDULED_TASK)
                            && OPTION.equals(mapping.getKey())) {
                        ((JSONObject) current).put(customMappingEnable ? mapping.getMapping() : mapping.getKey(), noticeEventEnum.key());
                    }
                }
            }

            return JSON.toJSONString(requestBodyObj, SystemGlobalConfig.FASTJSON_DEFAULT_WRITER_FEATURES);
        }

        // 唯一键
        String primaryKey = dataMapping.stream().filter(SubscriptionDetailConfigModel.DataMapping::getIsPrimary).findFirst().orElseThrow(() -> new CustomException("未找到唯一键")).getMapping();
        return transformDataList.stream().map(item -> delMappingKey + "=" + item.get(primaryKey)).collect(Collectors.joining("&"));
    }

和我要实现的结果不一致，我需要实现的要求如下:
1.dataPosition有值（例：a.b）且urls长度为3时，paramMapping的DATA_KEYS中的mapping为空时, 若接口为批量，则结果为{"a":{"b": [{...}]}},若接口为单个，则结果为{"a":{"b": {...}}}
2.dataPosition有值（例：a.b）且urls长度不为3时，若接口为批量，则结果为{"a":{"b": {"option": "create", "userList": [{...}]}}},若接口为单个，则结果为{"a":{"b": {"option": "create", "userList": {...}}}}
3.dataPosition无值且urls长度为3时，paramMapping的DATA_KEYS中的mapping为空时, 若接口为批量，则结果为[{...}],若接口为单个，则结果为{...}
4.dataPosition无值且urls长度不为3时，若接口为批量，则结果为{"option": "create", "userList": [{...}]},若接口为单个，则结果为{"option": "create", "userList": {...}}
